// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CAMC_ArrayProduct_Pipeline_VITIS_LOOP_187_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_out,
        p_out_ap_vld,
        weights_test_address0,
        weights_test_ce0,
        weights_test_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [30:0] p_out;
output   p_out_ap_vld;
output  [13:0] weights_test_address0;
output   weights_test_ce0;
input  [13:0] weights_test_q0;

reg ap_idle;
reg p_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln187_fu_126_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [5:0] Lite_2PSK_45m_weight_X_10_address0;
wire   [5:0] Lite_2PSK_45m_weight_X_10_q0;
wire   [5:0] Lite_2PSK_45m_weight_Y_10_address0;
wire   [5:0] Lite_2PSK_45m_weight_Y_10_q0;
wire   [5:0] Lite_2PSK_45m_weight_10_address0;
wire   [10:0] Lite_2PSK_45m_weight_10_q0;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln187_reg_224;
reg   [0:0] icmp_ln187_reg_224_pp0_iter1_reg;
reg   [0:0] icmp_ln187_reg_224_pp0_iter2_reg;
reg   [0:0] icmp_ln187_reg_224_pp0_iter3_reg;
reg   [0:0] icmp_ln187_reg_224_pp0_iter4_reg;
reg   [0:0] icmp_ln187_reg_224_pp0_iter5_reg;
reg   [0:0] icmp_ln187_reg_224_pp0_iter6_reg;
reg   [5:0] Lite_2PSK_45m_weight_Y_10_load_reg_248;
reg   [5:0] Lite_2PSK_45m_weight_Y_10_load_reg_248_pp0_iter2_reg;
reg   [10:0] Lite_2PSK_45m_weight_10_load_reg_253;
reg   [10:0] Lite_2PSK_45m_weight_10_load_reg_253_pp0_iter2_reg;
reg   [10:0] Lite_2PSK_45m_weight_10_load_reg_253_pp0_iter3_reg;
reg   [10:0] Lite_2PSK_45m_weight_10_load_reg_253_pp0_iter4_reg;
wire   [63:0] zext_ln187_fu_138_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln189_4_fu_168_p1;
reg   [30:0] empty_fu_46;
wire   [30:0] grp_fu_200_p3;
reg   [30:0] ap_sig_allocacmp_p_load;
wire    ap_loop_init;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [5:0] i_3_fu_50;
wire   [5:0] add_ln187_fu_132_p2;
reg   [5:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0_01001;
reg    Lite_2PSK_45m_weight_X_10_ce0_local;
reg    Lite_2PSK_45m_weight_Y_10_ce0_local;
reg    Lite_2PSK_45m_weight_10_ce0_local;
reg    weights_test_ce0_local;
wire   [5:0] add_ln189_fu_150_p2;
wire   [12:0] grp_fu_191_p3;
(* use_dsp48 = "no" *) wire   [12:0] add_ln189_2_fu_163_p2;
wire   [6:0] grp_fu_191_p0;
wire   [5:0] grp_fu_191_p1;
wire   [5:0] grp_fu_191_p2;
wire   [13:0] grp_fu_200_p0;
wire   [10:0] grp_fu_200_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [12:0] grp_fu_191_p10;
wire   [12:0] grp_fu_191_p20;
wire   [24:0] grp_fu_200_p00;
wire   [24:0] grp_fu_200_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 empty_fu_46 = 31'd0;
#0 i_3_fu_50 = 6'd0;
#0 ap_done_reg = 1'b0;
end

CAMC_ArrayProduct_Pipeline_VITIS_LOOP_187_2_Lite_2PSK_45m_weight_X_10_ROM_AUTO_1R #(
    .DataWidth( 6 ),
    .AddressRange( 54 ),
    .AddressWidth( 6 ))
Lite_2PSK_45m_weight_X_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Lite_2PSK_45m_weight_X_10_address0),
    .ce0(Lite_2PSK_45m_weight_X_10_ce0_local),
    .q0(Lite_2PSK_45m_weight_X_10_q0)
);

CAMC_ArrayProduct_Pipeline_VITIS_LOOP_187_2_Lite_2PSK_45m_weight_Y_10_ROM_AUTO_1R #(
    .DataWidth( 6 ),
    .AddressRange( 54 ),
    .AddressWidth( 6 ))
Lite_2PSK_45m_weight_Y_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Lite_2PSK_45m_weight_Y_10_address0),
    .ce0(Lite_2PSK_45m_weight_Y_10_ce0_local),
    .q0(Lite_2PSK_45m_weight_Y_10_q0)
);

CAMC_ArrayProduct_Pipeline_VITIS_LOOP_187_2_Lite_2PSK_45m_weight_10_ROM_AUTO_1R #(
    .DataWidth( 11 ),
    .AddressRange( 54 ),
    .AddressWidth( 6 ))
Lite_2PSK_45m_weight_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Lite_2PSK_45m_weight_10_address0),
    .ce0(Lite_2PSK_45m_weight_10_ce0_local),
    .q0(Lite_2PSK_45m_weight_10_q0)
);

CAMC_mac_muladd_7ns_6ns_6ns_13_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 13 ))
mac_muladd_7ns_6ns_6ns_13_4_1_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_191_p0),
    .din1(grp_fu_191_p1),
    .din2(grp_fu_191_p2),
    .ce(1'b1),
    .dout(grp_fu_191_p3)
);

CAMC_mac_muladd_14ns_11ns_31ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mac_muladd_14ns_11ns_31ns_31_4_1_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_200_p0),
    .din1(grp_fu_200_p1),
    .din2(ap_sig_allocacmp_p_load),
    .ce(1'b1),
    .dout(grp_fu_200_p3)
);

CAMC_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            empty_fu_46 <= 31'd0;
        end else if ((ap_enable_reg_pp0_iter8 == 1'b1)) begin
            empty_fu_46 <= grp_fu_200_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln187_fu_126_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_3_fu_50 <= add_ln187_fu_132_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_3_fu_50 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Lite_2PSK_45m_weight_10_load_reg_253 <= Lite_2PSK_45m_weight_10_q0;
        Lite_2PSK_45m_weight_Y_10_load_reg_248 <= Lite_2PSK_45m_weight_Y_10_q0;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln187_reg_224 <= icmp_ln187_fu_126_p2;
        icmp_ln187_reg_224_pp0_iter1_reg <= icmp_ln187_reg_224;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        Lite_2PSK_45m_weight_10_load_reg_253_pp0_iter2_reg <= Lite_2PSK_45m_weight_10_load_reg_253;
        Lite_2PSK_45m_weight_10_load_reg_253_pp0_iter3_reg <= Lite_2PSK_45m_weight_10_load_reg_253_pp0_iter2_reg;
        Lite_2PSK_45m_weight_10_load_reg_253_pp0_iter4_reg <= Lite_2PSK_45m_weight_10_load_reg_253_pp0_iter3_reg;
        Lite_2PSK_45m_weight_Y_10_load_reg_248_pp0_iter2_reg <= Lite_2PSK_45m_weight_Y_10_load_reg_248;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        icmp_ln187_reg_224_pp0_iter2_reg <= icmp_ln187_reg_224_pp0_iter1_reg;
        icmp_ln187_reg_224_pp0_iter3_reg <= icmp_ln187_reg_224_pp0_iter2_reg;
        icmp_ln187_reg_224_pp0_iter4_reg <= icmp_ln187_reg_224_pp0_iter3_reg;
        icmp_ln187_reg_224_pp0_iter5_reg <= icmp_ln187_reg_224_pp0_iter4_reg;
        icmp_ln187_reg_224_pp0_iter6_reg <= icmp_ln187_reg_224_pp0_iter5_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Lite_2PSK_45m_weight_10_ce0_local = 1'b1;
    end else begin
        Lite_2PSK_45m_weight_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Lite_2PSK_45m_weight_X_10_ce0_local = 1'b1;
    end else begin
        Lite_2PSK_45m_weight_X_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Lite_2PSK_45m_weight_Y_10_ce0_local = 1'b1;
    end else begin
        Lite_2PSK_45m_weight_Y_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln187_fu_126_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 6'd0;
    end else begin
        ap_sig_allocacmp_i = i_3_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        ap_sig_allocacmp_p_load = grp_fu_200_p3;
    end else begin
        ap_sig_allocacmp_p_load = empty_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (icmp_ln187_reg_224_pp0_iter6_reg == 1'd1))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_test_ce0_local = 1'b1;
    end else begin
        weights_test_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Lite_2PSK_45m_weight_10_address0 = zext_ln187_fu_138_p1;

assign Lite_2PSK_45m_weight_X_10_address0 = zext_ln187_fu_138_p1;

assign Lite_2PSK_45m_weight_Y_10_address0 = zext_ln187_fu_138_p1;

assign add_ln187_fu_132_p2 = (ap_sig_allocacmp_i + 6'd1);

assign add_ln189_2_fu_163_p2 = ($signed(grp_fu_191_p3) + $signed(13'd8191));

assign add_ln189_fu_150_p2 = ($signed(Lite_2PSK_45m_weight_X_10_q0) + $signed(6'd63));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign grp_fu_191_p0 = 13'd100;

assign grp_fu_191_p1 = grp_fu_191_p10;

assign grp_fu_191_p10 = add_ln189_fu_150_p2;

assign grp_fu_191_p2 = grp_fu_191_p20;

assign grp_fu_191_p20 = Lite_2PSK_45m_weight_Y_10_load_reg_248_pp0_iter2_reg;

assign grp_fu_200_p0 = grp_fu_200_p00;

assign grp_fu_200_p00 = weights_test_q0;

assign grp_fu_200_p1 = grp_fu_200_p10;

assign grp_fu_200_p10 = Lite_2PSK_45m_weight_10_load_reg_253_pp0_iter4_reg;

assign icmp_ln187_fu_126_p2 = ((ap_sig_allocacmp_i == 6'd54) ? 1'b1 : 1'b0);

assign p_out = empty_fu_46;

assign weights_test_address0 = zext_ln189_4_fu_168_p1;

assign weights_test_ce0 = weights_test_ce0_local;

assign zext_ln187_fu_138_p1 = ap_sig_allocacmp_i;

assign zext_ln189_4_fu_168_p1 = add_ln189_2_fu_163_p2;

endmodule //CAMC_ArrayProduct_Pipeline_VITIS_LOOP_187_2
