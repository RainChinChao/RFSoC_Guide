// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CAMC_CAMC_Pipeline_VITIS_LOOP_623_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Sample_no,
        clear_array_x_address0,
        clear_array_x_ce0,
        clear_array_x_q0,
        clear_array_y_address0,
        clear_array_y_ce0,
        clear_array_y_q0,
        weights_test_address0,
        weights_test_ce0,
        weights_test_we0,
        weights_test_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [13:0] Sample_no;
output  [13:0] clear_array_x_address0;
output   clear_array_x_ce0;
input  [6:0] clear_array_x_q0;
output  [13:0] clear_array_y_address0;
output   clear_array_y_ce0;
input  [6:0] clear_array_y_q0;
output  [13:0] weights_test_address0;
output   weights_test_ce0;
output   weights_test_we0;
output  [13:0] weights_test_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln623_fu_98_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln623_fu_110_p1;
reg   [63:0] zext_ln623_reg_172;
reg   [63:0] zext_ln623_reg_172_pp0_iter1_reg;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln625_2_fu_148_p1;
reg   [13:0] i_fu_40;
wire   [13:0] add_ln623_fu_104_p2;
wire    ap_loop_init;
reg   [13:0] ap_sig_allocacmp_i_1;
reg    clear_array_x_ce0_local;
reg    clear_array_y_ce0_local;
reg    weights_test_we0_local;
reg    weights_test_ce0_local;
wire   [7:0] zext_ln625_fu_120_p1;
wire  signed [7:0] add_ln625_fu_124_p2;
wire   [7:0] zext_ln625_1_fu_134_p1;
wire  signed [7:0] add_ln625_1_fu_138_p2;
wire  signed [13:0] zext_ln625_2_fu_148_p0;
wire   [13:0] grp_fu_152_p3;
wire   [6:0] grp_fu_152_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 i_fu_40 = 14'd0;
#0 ap_done_reg = 1'b0;
end

CAMC_mac_muladd_8s_7ns_8s_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 14 ))
mac_muladd_8s_7ns_8s_14_4_1_U137(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln625_fu_124_p2),
    .din1(grp_fu_152_p1),
    .din2(add_ln625_1_fu_138_p2),
    .ce(1'b1),
    .dout(grp_fu_152_p3)
);

CAMC_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln623_fu_98_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_40 <= add_ln623_fu_104_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_40 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        zext_ln623_reg_172[13 : 0] <= zext_ln623_fu_110_p1[13 : 0];
        zext_ln623_reg_172_pp0_iter1_reg[13 : 0] <= zext_ln623_reg_172[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (*) begin
    if (((icmp_ln623_fu_98_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 14'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_40;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        clear_array_x_ce0_local = 1'b1;
    end else begin
        clear_array_x_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        clear_array_y_ce0_local = 1'b1;
    end else begin
        clear_array_y_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_test_ce0_local = 1'b1;
    end else begin
        weights_test_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_test_we0_local = 1'b1;
    end else begin
        weights_test_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln623_fu_104_p2 = (ap_sig_allocacmp_i_1 + 14'd1);

assign add_ln625_1_fu_138_p2 = ($signed(zext_ln625_1_fu_134_p1) + $signed(8'd255));

assign add_ln625_fu_124_p2 = ($signed(zext_ln625_fu_120_p1) + $signed(8'd255));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign clear_array_x_address0 = zext_ln623_fu_110_p1;

assign clear_array_x_ce0 = clear_array_x_ce0_local;

assign clear_array_y_address0 = zext_ln623_reg_172_pp0_iter1_reg;

assign clear_array_y_ce0 = clear_array_y_ce0_local;

assign grp_fu_152_p1 = 14'd100;

assign icmp_ln623_fu_98_p2 = ((ap_sig_allocacmp_i_1 == Sample_no) ? 1'b1 : 1'b0);

assign weights_test_address0 = zext_ln625_2_fu_148_p1;

assign weights_test_ce0 = weights_test_ce0_local;

assign weights_test_d0 = 14'd0;

assign weights_test_we0 = weights_test_we0_local;

assign zext_ln623_fu_110_p1 = ap_sig_allocacmp_i_1;

assign zext_ln625_1_fu_134_p1 = clear_array_y_q0;

assign zext_ln625_2_fu_148_p0 = grp_fu_152_p3;

assign zext_ln625_2_fu_148_p1 = $unsigned(zext_ln625_2_fu_148_p0);

assign zext_ln625_fu_120_p1 = clear_array_x_q0;

always @ (posedge ap_clk) begin
    zext_ln623_reg_172[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln623_reg_172_pp0_iter1_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //CAMC_CAMC_Pipeline_VITIS_LOOP_623_3
