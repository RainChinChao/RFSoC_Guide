// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CAMC_Axis_Initialisation (
        ap_clk,
        ap_rst,
        input_r,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [19:0] input_r;
output  [6:0] ap_return;
input   ap_ce;

reg[6:0] ap_return;

wire   [63:0] grp_fu_164_p2;
reg   [63:0] reg_180;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] sign_bit_reg_1232;
reg   [0:0] sign_bit_reg_1232_pp0_iter7_reg;
reg   [0:0] sign_bit_reg_1232_pp0_iter1_reg;
reg   [0:0] sign_bit_reg_1232_pp0_iter2_reg;
reg   [0:0] sign_bit_reg_1232_pp0_iter3_reg;
reg   [0:0] sign_bit_reg_1232_pp0_iter4_reg;
reg   [0:0] sign_bit_reg_1232_pp0_iter5_reg;
reg   [0:0] sign_bit_reg_1232_pp0_iter6_reg;
reg   [0:0] sign_bit_reg_1232_pp0_iter8_reg;
reg   [7:0] tmp_s_reg_1237;
reg   [7:0] tmp_s_reg_1237_pp0_iter1_reg;
reg   [7:0] tmp_s_reg_1237_pp0_iter2_reg;
reg   [7:0] tmp_s_reg_1237_pp0_iter3_reg;
reg   [7:0] tmp_s_reg_1237_pp0_iter4_reg;
reg   [7:0] tmp_s_reg_1237_pp0_iter5_reg;
reg   [7:0] tmp_s_reg_1237_pp0_iter6_reg;
reg   [7:0] tmp_s_reg_1237_pp0_iter7_reg;
reg   [7:0] tmp_s_reg_1237_pp0_iter8_reg;
reg   [7:0] tmp_5_reg_1247;
reg   [7:0] tmp_5_reg_1247_pp0_iter1_reg;
reg   [7:0] tmp_5_reg_1247_pp0_iter2_reg;
reg   [7:0] tmp_5_reg_1247_pp0_iter3_reg;
reg   [7:0] tmp_5_reg_1247_pp0_iter4_reg;
reg   [7:0] tmp_5_reg_1247_pp0_iter5_reg;
reg   [7:0] tmp_5_reg_1247_pp0_iter6_reg;
reg   [7:0] tmp_5_reg_1247_pp0_iter7_reg;
reg   [7:0] tmp_5_reg_1247_pp0_iter8_reg;
wire   [63:0] grp_fu_174_p1;
reg   [63:0] conv_i1_reg_1257;
wire   [63:0] grp_fu_177_p1;
reg   [63:0] conv_i_reg_1262;
wire   [19:0] axis_final_2_fu_746_p3;
reg   [19:0] axis_final_2_reg_1267;
wire   [0:0] icmp_ln372_fu_763_p2;
reg   [0:0] icmp_ln372_reg_1273;
reg   [0:0] icmp_ln372_reg_1273_pp0_iter10_reg;
reg   [0:0] icmp_ln372_reg_1273_pp0_iter11_reg;
reg   [6:0] trunc_ln4_reg_1279;
reg   [6:0] trunc_ln4_reg_1279_pp0_iter11_reg;
wire   [0:0] tmp_10_fu_831_p3;
reg   [0:0] tmp_10_reg_1285;
wire   [19:0] select_ln385_fu_845_p3;
reg   [19:0] select_ln385_reg_1290;
wire   [10:0] trunc_ln385_1_fu_887_p1;
reg   [10:0] trunc_ln385_1_reg_1295;
wire   [1:0] or_ln_fu_995_p3;
reg   [1:0] or_ln_reg_1300;
wire   [0:0] icmp_ln385_2_fu_1003_p2;
reg   [0:0] icmp_ln385_2_reg_1305;
wire   [31:0] add_ln385_1_fu_1009_p2;
reg   [31:0] add_ln385_1_reg_1310;
wire   [31:0] sub_ln385_3_fu_1015_p2;
reg   [31:0] sub_ln385_3_reg_1315;
wire   [0:0] not_icmp_ln385_fu_1021_p2;
reg   [0:0] not_icmp_ln385_reg_1320;
reg   [0:0] not_icmp_ln385_reg_1320_pp0_iter11_reg;
wire   [0:0] icmp_ln385_5_fu_1027_p2;
reg   [0:0] icmp_ln385_5_reg_1325;
reg   [0:0] icmp_ln385_5_reg_1325_pp0_iter11_reg;
wire   [0:0] icmp_ln389_fu_1033_p2;
reg   [0:0] icmp_ln389_reg_1330;
reg   [0:0] icmp_ln389_reg_1330_pp0_iter11_reg;
wire   [0:0] icmp_ln385_3_fu_1151_p2;
reg   [0:0] icmp_ln385_3_reg_1340;
wire   [0:0] icmp_ln385_4_fu_1157_p2;
reg   [0:0] icmp_ln385_4_reg_1345;
reg   [63:0] grp_fu_164_p0;
wire    ap_block_pp0_stage0;
wire   [63:0] grp_fu_169_p0;
wire   [63:0] grp_fu_174_p0;
wire   [63:0] grp_fu_177_p0;
wire   [19:0] negative_fraction_fu_196_p2;
wire   [11:0] trunc_ln336_fu_202_p1;
wire   [11:0] trunc_ln325_fu_184_p1;
wire   [63:0] bitcast_ln716_fu_243_p1;
wire   [10:0] tmp_3_fu_259_p4;
wire   [51:0] trunc_ln342_1_fu_273_p1;
wire   [52:0] zext_ln342_2_cast_fu_277_p3;
wire   [53:0] zext_ln342_2_fu_285_p1;
wire   [0:0] tmp_4_fu_251_p3;
wire   [53:0] sub_ln342_fu_289_p2;
wire   [62:0] trunc_ln342_fu_247_p1;
wire   [63:0] bitcast_ln716_1_fu_316_p1;
wire   [10:0] tmp_8_fu_332_p4;
wire   [51:0] trunc_ln363_1_fu_346_p1;
wire   [52:0] zext_ln363_2_cast_fu_350_p3;
wire   [53:0] zext_ln363_2_fu_358_p1;
wire   [0:0] tmp_7_fu_324_p3;
wire   [53:0] sub_ln363_fu_362_p2;
wire   [62:0] trunc_ln363_fu_320_p1;
wire   [11:0] zext_ln342_1_fu_269_p1;
wire   [11:0] sub_ln342_1_fu_382_p2;
wire   [10:0] trunc_ln342_2_fu_388_p1;
wire   [0:0] icmp_ln342_1_fu_392_p2;
wire   [10:0] add_ln342_fu_398_p2;
wire   [10:0] sub_ln342_2_fu_404_p2;
wire   [11:0] zext_ln363_1_fu_342_p1;
wire   [11:0] sub_ln363_1_fu_424_p2;
wire   [10:0] trunc_ln363_2_fu_430_p1;
wire   [0:0] icmp_ln363_1_fu_434_p2;
wire   [10:0] add_ln363_fu_440_p2;
wire   [10:0] sub_ln363_2_fu_446_p2;
wire   [53:0] select_ln342_fu_295_p3;
wire   [53:0] select_ln363_fu_368_p3;
wire   [10:0] select_ln342_1_fu_410_p3;
wire   [53:0] zext_ln342_3_fu_480_p1;
wire   [53:0] ashr_ln342_fu_484_p2;
wire   [0:0] icmp_ln342_3_fu_474_p2;
wire   [19:0] trunc_ln342_4_fu_490_p1;
wire   [19:0] select_ln342_4_fu_494_p3;
wire   [19:0] trunc_ln342_3_fu_466_p1;
wire   [19:0] select_ln342_1cast_fu_516_p1;
wire   [0:0] icmp_ln342_4_fu_510_p2;
wire   [19:0] shl_ln342_fu_520_p2;
wire   [10:0] select_ln363_1_fu_452_p3;
wire   [53:0] zext_ln363_3_fu_540_p1;
wire   [53:0] ashr_ln363_fu_544_p2;
wire   [0:0] icmp_ln363_3_fu_534_p2;
wire   [19:0] trunc_ln363_4_fu_550_p1;
wire   [19:0] select_ln363_4_fu_554_p3;
wire   [19:0] trunc_ln363_3_fu_470_p1;
wire   [19:0] select_ln363_1cast_fu_576_p1;
wire   [0:0] icmp_ln363_4_fu_570_p2;
wire   [19:0] shl_ln363_fu_580_p2;
wire   [0:0] icmp_ln342_fu_303_p2;
wire   [0:0] icmp_ln342_2_fu_418_p2;
wire   [0:0] xor_ln342_fu_594_p2;
wire   [0:0] or_ln342_fu_606_p2;
wire   [0:0] xor_ln342_1_fu_612_p2;
wire   [0:0] and_ln342_fu_600_p2;
wire   [0:0] and_ln342_1_fu_618_p2;
wire   [19:0] x_axis_fraction_fu_634_p6;
wire   [19:0] x_axis_fraction_fu_634_p8;
wire   [19:0] x_axis_fraction_fu_634_p9;
wire   [2:0] x_axis_fraction_fu_634_p10;
wire   [19:0] and_ln_fu_236_p3;
wire   [19:0] axis_final_4_fu_658_p2;
wire   [19:0] x_axis_fraction_fu_634_p11;
wire   [0:0] icmp_ln363_fu_376_p2;
wire   [0:0] icmp_ln363_2_fu_460_p2;
wire   [0:0] xor_ln363_fu_670_p2;
wire   [0:0] or_ln363_fu_682_p2;
wire   [0:0] xor_ln363_1_fu_688_p2;
wire   [0:0] and_ln363_fu_676_p2;
wire   [0:0] and_ln363_1_fu_694_p2;
wire   [19:0] x_axis_fraction_1_fu_710_p6;
wire   [19:0] x_axis_fraction_1_fu_710_p8;
wire   [19:0] x_axis_fraction_1_fu_710_p9;
wire   [2:0] x_axis_fraction_1_fu_710_p10;
wire   [19:0] x_axis_fraction_1_fu_710_p11;
wire   [19:0] add_ln365_fu_734_p2;
wire   [19:0] and_ln1_fu_309_p3;
wire   [19:0] axis_final_fu_664_p2;
wire   [19:0] axis_final_3_fu_740_p2;
wire   [3:0] tmp_9_fu_753_p4;
wire   [19:0] shl_ln376_fu_769_p2;
wire   [19:0] shl_ln376_1_fu_774_p2;
wire   [19:0] temp_fu_779_p2;
wire   [7:0] temp_t_fu_785_p4;
wire   [19:0] shl_ln_fu_809_p3;
wire   [20:0] zext_ln385_fu_805_p1;
wire   [20:0] zext_ln385_1_fu_817_p1;
wire   [20:0] sub_ln385_fu_821_p2;
wire   [19:0] trunc_ln385_fu_827_p1;
wire   [19:0] sub_ln385_1_fu_839_p2;
wire   [20:0] zext_ln385_2_fu_853_p1;
reg   [20:0] tmp_2_fu_857_p4;
wire   [21:0] tmp_6_fu_867_p3;
wire  signed [31:0] sext_ln385_fu_875_p1;
reg   [31:0] tmp_1_fu_879_p3;
wire   [31:0] sub_ln385_2_fu_891_p2;
wire   [31:0] add_ln385_fu_897_p2;
wire   [30:0] tmp_11_fu_903_p4;
wire   [4:0] trunc_ln385_2_fu_919_p1;
wire   [4:0] sub_ln385_5_fu_923_p2;
wire   [20:0] zext_ln385_8_fu_929_p1;
wire   [20:0] lshr_ln385_2_fu_933_p2;
wire   [19:0] trunc_ln385_4_fu_939_p1;
wire   [19:0] and_ln385_4_fu_943_p2;
wire   [0:0] icmp_ln385_fu_913_p2;
wire   [0:0] icmp_ln385_1_fu_949_p2;
wire   [0:0] tmp_12_fu_961_p3;
wire   [0:0] tmp_14_fu_975_p3;
wire   [0:0] xor_ln385_fu_969_p2;
wire   [0:0] and_ln385_fu_983_p2;
wire   [0:0] phi_ln385_fu_955_p2;
wire   [0:0] or_ln385_fu_989_p2;
wire   [63:0] zext_ln385_3_fu_1039_p1;
wire   [63:0] zext_ln385_4_fu_1042_p1;
wire   [63:0] zext_ln385_5_fu_1051_p1;
wire   [63:0] lshr_ln385_fu_1045_p2;
wire   [63:0] shl_ln385_fu_1054_p2;
wire   [63:0] cond50_i_i204_fu_1060_p3;
wire   [63:0] zext_ln385_6_fu_1067_p1;
wire   [63:0] add_ln385_2_fu_1070_p2;
wire   [62:0] lshr_ln385_1_fu_1076_p4;
wire   [0:0] tmp_15_fu_1090_p3;
wire   [10:0] sub_ln385_4_fu_1106_p2;
wire   [10:0] select_ln385_1_fu_1098_p3;
wire   [10:0] add_ln385_3_fu_1111_p2;
wire   [63:0] zext_ln385_7_fu_1086_p1;
wire   [11:0] tmp_13_fu_1117_p3;
wire   [63:0] LD_2_fu_1124_p5;
wire   [51:0] trunc_ln385_3_fu_1141_p4;
wire   [0:0] or_ln385_1_fu_1163_p2;
wire   [0:0] grp_fu_169_p2;
wire   [0:0] and_ln385_1_fu_1167_p2;
wire   [0:0] and_ln385_2_fu_1189_p2;
wire   [0:0] phi_ln385_1_fu_1173_p2;
wire   [0:0] and_ln385_3_fu_1193_p2;
wire   [0:0] xor_ln372_fu_1199_p2;
wire   [6:0] UnifiedRetVal_cast_fu_1212_p2;
wire   [6:0] UnifiedRetVal_cast_fu_1212_p6;
wire   [6:0] UnifiedRetVal_cast_fu_1212_p7;
wire   [1:0] UnifiedRetVal_cast_fu_1212_p8;
reg    grp_fu_164_ce;
reg    grp_fu_169_ce;
wire    ap_block_pp0_stage0_00001;
reg    grp_fu_174_ce;
reg    grp_fu_177_ce;
wire   [6:0] UnifiedRetVal_cast_fu_1212_p9;
reg    ap_ce_reg;
reg   [19:0] input_r_int_reg;
reg   [6:0] ap_return_int_reg;
wire  signed [2:0] x_axis_fraction_fu_634_p1;
wire   [2:0] x_axis_fraction_fu_634_p3;
wire   [2:0] x_axis_fraction_fu_634_p5;
wire   [2:0] x_axis_fraction_fu_634_p7;
wire  signed [2:0] x_axis_fraction_1_fu_710_p1;
wire   [2:0] x_axis_fraction_1_fu_710_p3;
wire   [2:0] x_axis_fraction_1_fu_710_p5;
wire   [2:0] x_axis_fraction_1_fu_710_p7;
wire  signed [1:0] UnifiedRetVal_cast_fu_1212_p1;
wire   [1:0] UnifiedRetVal_cast_fu_1212_p3;
wire   [1:0] UnifiedRetVal_cast_fu_1212_p5;

CAMC_dmul_64ns_64ns_64_5_max_dsp_0 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_0_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_164_p0),
    .din1(64'd4553139223271571456),
    .ce(grp_fu_164_ce),
    .dout(grp_fu_164_p2)
);

CAMC_dcmp_64ns_64ns_1_2_no_dsp_0 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_0_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_169_p0),
    .din1(64'd4602678819172646912),
    .ce(grp_fu_169_ce),
    .opcode(5'd3),
    .dout(grp_fu_169_p2)
);

CAMC_sitodp_64ns_64_4_no_dsp_0 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sitodp_64ns_64_4_no_dsp_0_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_174_p0),
    .ce(grp_fu_174_ce),
    .dout(grp_fu_174_p1)
);

CAMC_sitodp_64ns_64_4_no_dsp_0 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sitodp_64ns_64_4_no_dsp_0_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_177_p0),
    .ce(grp_fu_177_ce),
    .dout(grp_fu_177_p1)
);

(* dissolve_hierarchy = "yes" *) CAMC_sparsemux_9_3_20_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h4 ),
    .din0_WIDTH( 20 ),
    .CASE1( 3'h2 ),
    .din1_WIDTH( 20 ),
    .CASE2( 3'h1 ),
    .din2_WIDTH( 20 ),
    .CASE3( 3'h0 ),
    .din3_WIDTH( 20 ),
    .def_WIDTH( 20 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 20 ))
sparsemux_9_3_20_1_0_U5(
    .din0(20'd0),
    .din1(trunc_ln342_3_fu_466_p1),
    .din2(x_axis_fraction_fu_634_p6),
    .din3(x_axis_fraction_fu_634_p8),
    .def(x_axis_fraction_fu_634_p9),
    .sel(x_axis_fraction_fu_634_p10),
    .dout(x_axis_fraction_fu_634_p11)
);

(* dissolve_hierarchy = "yes" *) CAMC_sparsemux_9_3_20_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h4 ),
    .din0_WIDTH( 20 ),
    .CASE1( 3'h2 ),
    .din1_WIDTH( 20 ),
    .CASE2( 3'h1 ),
    .din2_WIDTH( 20 ),
    .CASE3( 3'h0 ),
    .din3_WIDTH( 20 ),
    .def_WIDTH( 20 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 20 ))
sparsemux_9_3_20_1_0_U6(
    .din0(20'd0),
    .din1(trunc_ln363_3_fu_470_p1),
    .din2(x_axis_fraction_1_fu_710_p6),
    .din3(x_axis_fraction_1_fu_710_p8),
    .def(x_axis_fraction_1_fu_710_p9),
    .sel(x_axis_fraction_1_fu_710_p10),
    .dout(x_axis_fraction_1_fu_710_p11)
);

(* dissolve_hierarchy = "yes" *) CAMC_sparsemux_7_2_7_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h2 ),
    .din0_WIDTH( 7 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 7 ),
    .CASE2( 2'h0 ),
    .din2_WIDTH( 7 ),
    .def_WIDTH( 7 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 7 ))
sparsemux_7_2_7_1_0_U7(
    .din0(UnifiedRetVal_cast_fu_1212_p2),
    .din1(7'd0),
    .din2(UnifiedRetVal_cast_fu_1212_p6),
    .def(UnifiedRetVal_cast_fu_1212_p7),
    .sel(UnifiedRetVal_cast_fu_1212_p8),
    .dout(UnifiedRetVal_cast_fu_1212_p9)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln385_1_reg_1310 <= add_ln385_1_fu_1009_p2;
        axis_final_2_reg_1267 <= axis_final_2_fu_746_p3;
        conv_i1_reg_1257 <= grp_fu_174_p1;
        conv_i_reg_1262 <= grp_fu_177_p1;
        icmp_ln372_reg_1273 <= icmp_ln372_fu_763_p2;
        icmp_ln372_reg_1273_pp0_iter10_reg <= icmp_ln372_reg_1273;
        icmp_ln372_reg_1273_pp0_iter11_reg <= icmp_ln372_reg_1273_pp0_iter10_reg;
        icmp_ln385_2_reg_1305 <= icmp_ln385_2_fu_1003_p2;
        icmp_ln385_3_reg_1340 <= icmp_ln385_3_fu_1151_p2;
        icmp_ln385_4_reg_1345 <= icmp_ln385_4_fu_1157_p2;
        icmp_ln385_5_reg_1325 <= icmp_ln385_5_fu_1027_p2;
        icmp_ln385_5_reg_1325_pp0_iter11_reg <= icmp_ln385_5_reg_1325;
        icmp_ln389_reg_1330 <= icmp_ln389_fu_1033_p2;
        icmp_ln389_reg_1330_pp0_iter11_reg <= icmp_ln389_reg_1330;
        not_icmp_ln385_reg_1320 <= not_icmp_ln385_fu_1021_p2;
        not_icmp_ln385_reg_1320_pp0_iter11_reg <= not_icmp_ln385_reg_1320;
        or_ln_reg_1300[0] <= or_ln_fu_995_p3[0];
        select_ln385_reg_1290[19 : 1] <= select_ln385_fu_845_p3[19 : 1];
        sign_bit_reg_1232 <= input_r_int_reg[32'd19];
        sign_bit_reg_1232_pp0_iter1_reg <= sign_bit_reg_1232;
        sign_bit_reg_1232_pp0_iter2_reg <= sign_bit_reg_1232_pp0_iter1_reg;
        sign_bit_reg_1232_pp0_iter3_reg <= sign_bit_reg_1232_pp0_iter2_reg;
        sign_bit_reg_1232_pp0_iter4_reg <= sign_bit_reg_1232_pp0_iter3_reg;
        sign_bit_reg_1232_pp0_iter5_reg <= sign_bit_reg_1232_pp0_iter4_reg;
        sign_bit_reg_1232_pp0_iter6_reg <= sign_bit_reg_1232_pp0_iter5_reg;
        sign_bit_reg_1232_pp0_iter7_reg <= sign_bit_reg_1232_pp0_iter6_reg;
        sign_bit_reg_1232_pp0_iter8_reg <= sign_bit_reg_1232_pp0_iter7_reg;
        sub_ln385_3_reg_1315 <= sub_ln385_3_fu_1015_p2;
        tmp_10_reg_1285 <= sub_ln385_fu_821_p2[32'd20];
        tmp_5_reg_1247 <= {{input_r_int_reg[19:12]}};
        tmp_5_reg_1247_pp0_iter1_reg <= tmp_5_reg_1247;
        tmp_5_reg_1247_pp0_iter2_reg <= tmp_5_reg_1247_pp0_iter1_reg;
        tmp_5_reg_1247_pp0_iter3_reg <= tmp_5_reg_1247_pp0_iter2_reg;
        tmp_5_reg_1247_pp0_iter4_reg <= tmp_5_reg_1247_pp0_iter3_reg;
        tmp_5_reg_1247_pp0_iter5_reg <= tmp_5_reg_1247_pp0_iter4_reg;
        tmp_5_reg_1247_pp0_iter6_reg <= tmp_5_reg_1247_pp0_iter5_reg;
        tmp_5_reg_1247_pp0_iter7_reg <= tmp_5_reg_1247_pp0_iter6_reg;
        tmp_5_reg_1247_pp0_iter8_reg <= tmp_5_reg_1247_pp0_iter7_reg;
        tmp_s_reg_1237 <= {{negative_fraction_fu_196_p2[19:12]}};
        tmp_s_reg_1237_pp0_iter1_reg <= tmp_s_reg_1237;
        tmp_s_reg_1237_pp0_iter2_reg <= tmp_s_reg_1237_pp0_iter1_reg;
        tmp_s_reg_1237_pp0_iter3_reg <= tmp_s_reg_1237_pp0_iter2_reg;
        tmp_s_reg_1237_pp0_iter4_reg <= tmp_s_reg_1237_pp0_iter3_reg;
        tmp_s_reg_1237_pp0_iter5_reg <= tmp_s_reg_1237_pp0_iter4_reg;
        tmp_s_reg_1237_pp0_iter6_reg <= tmp_s_reg_1237_pp0_iter5_reg;
        tmp_s_reg_1237_pp0_iter7_reg <= tmp_s_reg_1237_pp0_iter6_reg;
        tmp_s_reg_1237_pp0_iter8_reg <= tmp_s_reg_1237_pp0_iter7_reg;
        trunc_ln385_1_reg_1295 <= trunc_ln385_1_fu_887_p1;
        trunc_ln4_reg_1279 <= {{temp_fu_779_p2[18:12]}};
        trunc_ln4_reg_1279_pp0_iter11_reg <= trunc_ln4_reg_1279;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= UnifiedRetVal_cast_fu_1212_p9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        input_r_int_reg <= input_r;
    end
end

always @ (posedge ap_clk) begin
    if ((((sign_bit_reg_1232_pp0_iter7_reg == 1'd0) & (1'b1 == ap_ce_reg) & (1'b0 == ap_block_pp0_stage0_11001)) | ((sign_bit_reg_1232_pp0_iter7_reg == 1'd1) & (1'b1 == ap_ce_reg) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_180 <= grp_fu_164_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = UnifiedRetVal_cast_fu_1212_p9;
    end else begin
        ap_return = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_164_ce = 1'b1;
    end else begin
        grp_fu_164_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0)) begin
        if ((sign_bit_reg_1232_pp0_iter3_reg == 1'd0)) begin
            grp_fu_164_p0 = conv_i_reg_1262;
        end else if ((sign_bit_reg_1232_pp0_iter3_reg == 1'd1)) begin
            grp_fu_164_p0 = conv_i1_reg_1257;
        end else begin
            grp_fu_164_p0 = 'bx;
        end
    end else begin
        grp_fu_164_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_169_ce = 1'b1;
    end else begin
        grp_fu_169_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_174_ce = 1'b1;
    end else begin
        grp_fu_174_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_177_ce = 1'b1;
    end else begin
        grp_fu_177_ce = 1'b0;
    end
end

assign LD_2_fu_1124_p5 = {{tmp_13_fu_1117_p3}, {zext_ln385_7_fu_1086_p1[51:0]}};

assign UnifiedRetVal_cast_fu_1212_p2 = (trunc_ln4_reg_1279_pp0_iter11_reg + 7'd1);

assign UnifiedRetVal_cast_fu_1212_p6 = ((icmp_ln389_reg_1330_pp0_iter11_reg[0:0] == 1'b1) ? 7'd0 : trunc_ln4_reg_1279_pp0_iter11_reg);

assign UnifiedRetVal_cast_fu_1212_p7 = 'bx;

assign UnifiedRetVal_cast_fu_1212_p8 = {{and_ln385_3_fu_1193_p2}, {xor_ln372_fu_1199_p2}};

assign add_ln342_fu_398_p2 = ($signed(trunc_ln342_2_fu_388_p1) + $signed(11'd2036));

assign add_ln363_fu_440_p2 = ($signed(trunc_ln363_2_fu_430_p1) + $signed(11'd2036));

assign add_ln365_fu_734_p2 = (x_axis_fraction_1_fu_710_p11 + 20'd20480);

assign add_ln385_1_fu_1009_p2 = ($signed(sub_ln385_2_fu_891_p2) + $signed(32'd4294967242));

assign add_ln385_2_fu_1070_p2 = (cond50_i_i204_fu_1060_p3 + zext_ln385_6_fu_1067_p1);

assign add_ln385_3_fu_1111_p2 = (sub_ln385_4_fu_1106_p2 + select_ln385_1_fu_1098_p3);

assign add_ln385_fu_897_p2 = ($signed(sub_ln385_2_fu_891_p2) + $signed(32'd4294967243));

assign and_ln1_fu_309_p3 = {{tmp_5_reg_1247_pp0_iter8_reg}, {12'd0}};

assign and_ln342_1_fu_618_p2 = (xor_ln342_1_fu_612_p2 & icmp_ln342_1_fu_392_p2);

assign and_ln342_fu_600_p2 = (xor_ln342_fu_594_p2 & icmp_ln342_2_fu_418_p2);

assign and_ln363_1_fu_694_p2 = (xor_ln363_1_fu_688_p2 & icmp_ln363_1_fu_434_p2);

assign and_ln363_fu_676_p2 = (xor_ln363_fu_670_p2 & icmp_ln363_2_fu_460_p2);

assign and_ln385_1_fu_1167_p2 = (or_ln385_1_fu_1163_p2 & grp_fu_169_p2);

assign and_ln385_2_fu_1189_p2 = (icmp_ln385_5_reg_1325_pp0_iter11_reg & icmp_ln372_reg_1273_pp0_iter11_reg);

assign and_ln385_3_fu_1193_p2 = (phi_ln385_1_fu_1173_p2 & and_ln385_2_fu_1189_p2);

assign and_ln385_4_fu_943_p2 = (trunc_ln385_4_fu_939_p1 & select_ln385_fu_845_p3);

assign and_ln385_fu_983_p2 = (xor_ln385_fu_969_p2 & tmp_14_fu_975_p3);

assign and_ln_fu_236_p3 = {{tmp_s_reg_1237_pp0_iter8_reg}, {12'd0}};

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ashr_ln342_fu_484_p2 = $signed(select_ln342_fu_295_p3) >>> zext_ln342_3_fu_480_p1;

assign ashr_ln363_fu_544_p2 = $signed(select_ln363_fu_368_p3) >>> zext_ln363_3_fu_540_p1;

assign axis_final_2_fu_746_p3 = ((sign_bit_reg_1232_pp0_iter8_reg[0:0] == 1'b1) ? axis_final_fu_664_p2 : axis_final_3_fu_740_p2);

assign axis_final_3_fu_740_p2 = (add_ln365_fu_734_p2 + and_ln1_fu_309_p3);

assign axis_final_4_fu_658_p2 = (20'd20480 - and_ln_fu_236_p3);

assign axis_final_fu_664_p2 = (axis_final_4_fu_658_p2 - x_axis_fraction_fu_634_p11);

assign bitcast_ln716_1_fu_316_p1 = reg_180;

assign bitcast_ln716_fu_243_p1 = reg_180;

assign cond50_i_i204_fu_1060_p3 = ((icmp_ln385_2_reg_1305[0:0] == 1'b1) ? lshr_ln385_fu_1045_p2 : shl_ln385_fu_1054_p2);

assign grp_fu_169_p0 = LD_2_fu_1124_p5;

assign grp_fu_174_p0 = trunc_ln336_fu_202_p1;

assign grp_fu_177_p0 = trunc_ln325_fu_184_p1;

assign icmp_ln342_1_fu_392_p2 = (($signed(sub_ln342_1_fu_382_p2) > $signed(12'd12)) ? 1'b1 : 1'b0);

assign icmp_ln342_2_fu_418_p2 = ((sub_ln342_1_fu_382_p2 == 12'd12) ? 1'b1 : 1'b0);

assign icmp_ln342_3_fu_474_p2 = ((select_ln342_1_fu_410_p3 < 11'd54) ? 1'b1 : 1'b0);

assign icmp_ln342_4_fu_510_p2 = ((select_ln342_1_fu_410_p3 < 11'd20) ? 1'b1 : 1'b0);

assign icmp_ln342_fu_303_p2 = ((trunc_ln342_fu_247_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln363_1_fu_434_p2 = (($signed(sub_ln363_1_fu_424_p2) > $signed(12'd12)) ? 1'b1 : 1'b0);

assign icmp_ln363_2_fu_460_p2 = ((sub_ln363_1_fu_424_p2 == 12'd12) ? 1'b1 : 1'b0);

assign icmp_ln363_3_fu_534_p2 = ((select_ln363_1_fu_452_p3 < 11'd54) ? 1'b1 : 1'b0);

assign icmp_ln363_4_fu_570_p2 = ((select_ln363_1_fu_452_p3 < 11'd20) ? 1'b1 : 1'b0);

assign icmp_ln363_fu_376_p2 = ((trunc_ln363_fu_320_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln372_fu_763_p2 = ((tmp_9_fu_753_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln385_1_fu_949_p2 = ((and_ln385_4_fu_943_p2 != 20'd0) ? 1'b1 : 1'b0);

assign icmp_ln385_2_fu_1003_p2 = (($signed(add_ln385_fu_897_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln385_3_fu_1151_p2 = ((add_ln385_3_fu_1111_p2 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln385_4_fu_1157_p2 = ((trunc_ln385_3_fu_1141_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln385_5_fu_1027_p2 = ((temp_fu_779_p2 < 20'd409600) ? 1'b1 : 1'b0);

assign icmp_ln385_fu_913_p2 = (($signed(tmp_11_fu_903_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln389_fu_1033_p2 = ((temp_t_fu_785_p4 > 8'd99) ? 1'b1 : 1'b0);

assign lshr_ln385_1_fu_1076_p4 = {{add_ln385_2_fu_1070_p2[63:1]}};

assign lshr_ln385_2_fu_933_p2 = 21'd2097151 >> zext_ln385_8_fu_929_p1;

assign lshr_ln385_fu_1045_p2 = zext_ln385_3_fu_1039_p1 >> zext_ln385_4_fu_1042_p1;

assign negative_fraction_fu_196_p2 = (20'd0 - input_r_int_reg);

assign not_icmp_ln385_fu_1021_p2 = ((temp_fu_779_p2 != shl_ln_fu_809_p3) ? 1'b1 : 1'b0);

assign or_ln342_fu_606_p2 = (icmp_ln342_fu_303_p2 | icmp_ln342_2_fu_418_p2);

assign or_ln363_fu_682_p2 = (icmp_ln363_fu_376_p2 | icmp_ln363_2_fu_460_p2);

assign or_ln385_1_fu_1163_p2 = (icmp_ln385_4_reg_1345 | icmp_ln385_3_reg_1340);

assign or_ln385_fu_989_p2 = (phi_ln385_fu_955_p2 | and_ln385_fu_983_p2);

assign or_ln_fu_995_p3 = {{1'd0}, {or_ln385_fu_989_p2}};

assign phi_ln385_1_fu_1173_p2 = (not_icmp_ln385_reg_1320_pp0_iter11_reg & and_ln385_1_fu_1167_p2);

assign phi_ln385_fu_955_p2 = (icmp_ln385_fu_913_p2 & icmp_ln385_1_fu_949_p2);

assign select_ln342_1_fu_410_p3 = ((icmp_ln342_1_fu_392_p2[0:0] == 1'b1) ? add_ln342_fu_398_p2 : sub_ln342_2_fu_404_p2);

assign select_ln342_1cast_fu_516_p1 = select_ln342_1_fu_410_p3;

assign select_ln342_4_fu_494_p3 = ((tmp_4_fu_251_p3[0:0] == 1'b1) ? 20'd1048575 : 20'd0);

assign select_ln342_fu_295_p3 = ((tmp_4_fu_251_p3[0:0] == 1'b1) ? sub_ln342_fu_289_p2 : zext_ln342_2_fu_285_p1);

assign select_ln363_1_fu_452_p3 = ((icmp_ln363_1_fu_434_p2[0:0] == 1'b1) ? add_ln363_fu_440_p2 : sub_ln363_2_fu_446_p2);

assign select_ln363_1cast_fu_576_p1 = select_ln363_1_fu_452_p3;

assign select_ln363_4_fu_554_p3 = ((tmp_7_fu_324_p3[0:0] == 1'b1) ? 20'd1048575 : 20'd0);

assign select_ln363_fu_368_p3 = ((tmp_7_fu_324_p3[0:0] == 1'b1) ? sub_ln363_fu_362_p2 : zext_ln363_2_fu_358_p1);

assign select_ln385_1_fu_1098_p3 = ((tmp_15_fu_1090_p3[0:0] == 1'b1) ? 11'd1023 : 11'd1022);

assign select_ln385_fu_845_p3 = ((tmp_10_fu_831_p3[0:0] == 1'b1) ? sub_ln385_1_fu_839_p2 : trunc_ln385_fu_827_p1);

assign sext_ln385_fu_875_p1 = $signed(tmp_6_fu_867_p3);

assign shl_ln342_fu_520_p2 = trunc_ln342_3_fu_466_p1 << select_ln342_1cast_fu_516_p1;

assign shl_ln363_fu_580_p2 = trunc_ln363_3_fu_470_p1 << select_ln363_1cast_fu_576_p1;

assign shl_ln376_1_fu_774_p2 = axis_final_2_reg_1267 << 20'd1;

assign shl_ln376_fu_769_p2 = axis_final_2_reg_1267 << 20'd3;

assign shl_ln385_fu_1054_p2 = zext_ln385_3_fu_1039_p1 << zext_ln385_5_fu_1051_p1;

assign shl_ln_fu_809_p3 = {{temp_t_fu_785_p4}, {12'd0}};

assign sub_ln342_1_fu_382_p2 = (12'd1075 - zext_ln342_1_fu_269_p1);

assign sub_ln342_2_fu_404_p2 = (11'd12 - trunc_ln342_2_fu_388_p1);

assign sub_ln342_fu_289_p2 = (54'd0 - zext_ln342_2_fu_285_p1);

assign sub_ln363_1_fu_424_p2 = (12'd1075 - zext_ln363_1_fu_342_p1);

assign sub_ln363_2_fu_446_p2 = (11'd12 - trunc_ln363_2_fu_430_p1);

assign sub_ln363_fu_362_p2 = (54'd0 - zext_ln363_2_fu_358_p1);

assign sub_ln385_1_fu_839_p2 = (20'd0 - trunc_ln385_fu_827_p1);

assign sub_ln385_2_fu_891_p2 = (32'd21 - tmp_1_fu_879_p3);

assign sub_ln385_3_fu_1015_p2 = (32'd54 - sub_ln385_2_fu_891_p2);

assign sub_ln385_4_fu_1106_p2 = (11'd9 - trunc_ln385_1_reg_1295);

assign sub_ln385_5_fu_923_p2 = (5'd11 - trunc_ln385_2_fu_919_p1);

assign sub_ln385_fu_821_p2 = (zext_ln385_fu_805_p1 - zext_ln385_1_fu_817_p1);

assign temp_fu_779_p2 = (shl_ln376_fu_769_p2 + shl_ln376_1_fu_774_p2);

assign temp_t_fu_785_p4 = {{temp_fu_779_p2[19:12]}};

assign tmp_10_fu_831_p3 = sub_ln385_fu_821_p2[32'd20];

assign tmp_11_fu_903_p4 = {{add_ln385_fu_897_p2[31:1]}};

assign tmp_12_fu_961_p3 = add_ln385_fu_897_p2[32'd31];

assign tmp_13_fu_1117_p3 = {{tmp_10_reg_1285}, {add_ln385_3_fu_1111_p2}};

assign tmp_14_fu_975_p3 = zext_ln385_2_fu_853_p1[add_ln385_fu_897_p2];

assign tmp_15_fu_1090_p3 = add_ln385_2_fu_1070_p2[32'd54];


always @ (sext_ln385_fu_875_p1) begin
    if (sext_ln385_fu_875_p1[0] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd0;
    end else if (sext_ln385_fu_875_p1[1] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd1;
    end else if (sext_ln385_fu_875_p1[2] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd2;
    end else if (sext_ln385_fu_875_p1[3] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd3;
    end else if (sext_ln385_fu_875_p1[4] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd4;
    end else if (sext_ln385_fu_875_p1[5] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd5;
    end else if (sext_ln385_fu_875_p1[6] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd6;
    end else if (sext_ln385_fu_875_p1[7] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd7;
    end else if (sext_ln385_fu_875_p1[8] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd8;
    end else if (sext_ln385_fu_875_p1[9] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd9;
    end else if (sext_ln385_fu_875_p1[10] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd10;
    end else if (sext_ln385_fu_875_p1[11] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd11;
    end else if (sext_ln385_fu_875_p1[12] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd12;
    end else if (sext_ln385_fu_875_p1[13] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd13;
    end else if (sext_ln385_fu_875_p1[14] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd14;
    end else if (sext_ln385_fu_875_p1[15] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd15;
    end else if (sext_ln385_fu_875_p1[16] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd16;
    end else if (sext_ln385_fu_875_p1[17] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd17;
    end else if (sext_ln385_fu_875_p1[18] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd18;
    end else if (sext_ln385_fu_875_p1[19] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd19;
    end else if (sext_ln385_fu_875_p1[20] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd20;
    end else if (sext_ln385_fu_875_p1[21] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd21;
    end else if (sext_ln385_fu_875_p1[22] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd22;
    end else if (sext_ln385_fu_875_p1[23] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd23;
    end else if (sext_ln385_fu_875_p1[24] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd24;
    end else if (sext_ln385_fu_875_p1[25] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd25;
    end else if (sext_ln385_fu_875_p1[26] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd26;
    end else if (sext_ln385_fu_875_p1[27] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd27;
    end else if (sext_ln385_fu_875_p1[28] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd28;
    end else if (sext_ln385_fu_875_p1[29] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd29;
    end else if (sext_ln385_fu_875_p1[30] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd30;
    end else if (sext_ln385_fu_875_p1[31] == 1'b1) begin
        tmp_1_fu_879_p3 = 32'd31;
    end else begin
        tmp_1_fu_879_p3 = 32'd32;
    end
end

integer ap_tvar_int_0;

always @ (zext_ln385_2_fu_853_p1) begin
    for (ap_tvar_int_0 = 21 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 20 - 0) begin
            tmp_2_fu_857_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_2_fu_857_p4[ap_tvar_int_0] = zext_ln385_2_fu_853_p1[20 - ap_tvar_int_0];
        end
    end
end

assign tmp_3_fu_259_p4 = {{bitcast_ln716_fu_243_p1[62:52]}};

assign tmp_4_fu_251_p3 = bitcast_ln716_fu_243_p1[32'd63];

assign tmp_6_fu_867_p3 = {{1'd1}, {tmp_2_fu_857_p4}};

assign tmp_7_fu_324_p3 = bitcast_ln716_1_fu_316_p1[32'd63];

assign tmp_8_fu_332_p4 = {{bitcast_ln716_1_fu_316_p1[62:52]}};

assign tmp_9_fu_753_p4 = {{axis_final_2_fu_746_p3[19:16]}};

assign trunc_ln325_fu_184_p1 = input_r_int_reg[11:0];

assign trunc_ln336_fu_202_p1 = negative_fraction_fu_196_p2[11:0];

assign trunc_ln342_1_fu_273_p1 = bitcast_ln716_fu_243_p1[51:0];

assign trunc_ln342_2_fu_388_p1 = sub_ln342_1_fu_382_p2[10:0];

assign trunc_ln342_3_fu_466_p1 = select_ln342_fu_295_p3[19:0];

assign trunc_ln342_4_fu_490_p1 = ashr_ln342_fu_484_p2[19:0];

assign trunc_ln342_fu_247_p1 = bitcast_ln716_fu_243_p1[62:0];

assign trunc_ln363_1_fu_346_p1 = bitcast_ln716_1_fu_316_p1[51:0];

assign trunc_ln363_2_fu_430_p1 = sub_ln363_1_fu_424_p2[10:0];

assign trunc_ln363_3_fu_470_p1 = select_ln363_fu_368_p3[19:0];

assign trunc_ln363_4_fu_550_p1 = ashr_ln363_fu_544_p2[19:0];

assign trunc_ln363_fu_320_p1 = bitcast_ln716_1_fu_316_p1[62:0];

assign trunc_ln385_1_fu_887_p1 = tmp_1_fu_879_p3[10:0];

assign trunc_ln385_2_fu_919_p1 = sub_ln385_2_fu_891_p2[4:0];

assign trunc_ln385_3_fu_1141_p4 = {{add_ln385_2_fu_1070_p2[52:1]}};

assign trunc_ln385_4_fu_939_p1 = lshr_ln385_2_fu_933_p2[19:0];

assign trunc_ln385_fu_827_p1 = sub_ln385_fu_821_p2[19:0];

assign x_axis_fraction_1_fu_710_p10 = {{{icmp_ln363_fu_376_p2}, {and_ln363_fu_676_p2}}, {and_ln363_1_fu_694_p2}};

assign x_axis_fraction_1_fu_710_p6 = ((icmp_ln363_3_fu_534_p2[0:0] == 1'b1) ? trunc_ln363_4_fu_550_p1 : select_ln363_4_fu_554_p3);

assign x_axis_fraction_1_fu_710_p8 = ((icmp_ln363_4_fu_570_p2[0:0] == 1'b1) ? shl_ln363_fu_580_p2 : 20'd0);

assign x_axis_fraction_1_fu_710_p9 = 'bx;

assign x_axis_fraction_fu_634_p10 = {{{icmp_ln342_fu_303_p2}, {and_ln342_fu_600_p2}}, {and_ln342_1_fu_618_p2}};

assign x_axis_fraction_fu_634_p6 = ((icmp_ln342_3_fu_474_p2[0:0] == 1'b1) ? trunc_ln342_4_fu_490_p1 : select_ln342_4_fu_494_p3);

assign x_axis_fraction_fu_634_p8 = ((icmp_ln342_4_fu_510_p2[0:0] == 1'b1) ? shl_ln342_fu_520_p2 : 20'd0);

assign x_axis_fraction_fu_634_p9 = 'bx;

assign xor_ln342_1_fu_612_p2 = (or_ln342_fu_606_p2 ^ 1'd1);

assign xor_ln342_fu_594_p2 = (icmp_ln342_fu_303_p2 ^ 1'd1);

assign xor_ln363_1_fu_688_p2 = (or_ln363_fu_682_p2 ^ 1'd1);

assign xor_ln363_fu_670_p2 = (icmp_ln363_fu_376_p2 ^ 1'd1);

assign xor_ln372_fu_1199_p2 = (icmp_ln372_reg_1273_pp0_iter11_reg ^ 1'd1);

assign xor_ln385_fu_969_p2 = (tmp_12_fu_961_p3 ^ 1'd1);

assign zext_ln342_1_fu_269_p1 = tmp_3_fu_259_p4;

assign zext_ln342_2_cast_fu_277_p3 = {{1'd1}, {trunc_ln342_1_fu_273_p1}};

assign zext_ln342_2_fu_285_p1 = zext_ln342_2_cast_fu_277_p3;

assign zext_ln342_3_fu_480_p1 = select_ln342_1_fu_410_p3;

assign zext_ln363_1_fu_342_p1 = tmp_8_fu_332_p4;

assign zext_ln363_2_cast_fu_350_p3 = {{1'd1}, {trunc_ln363_1_fu_346_p1}};

assign zext_ln363_2_fu_358_p1 = zext_ln363_2_cast_fu_350_p3;

assign zext_ln363_3_fu_540_p1 = select_ln363_1_fu_452_p3;

assign zext_ln385_1_fu_817_p1 = shl_ln_fu_809_p3;

assign zext_ln385_2_fu_853_p1 = select_ln385_fu_845_p3;

assign zext_ln385_3_fu_1039_p1 = select_ln385_reg_1290;

assign zext_ln385_4_fu_1042_p1 = add_ln385_1_reg_1310;

assign zext_ln385_5_fu_1051_p1 = sub_ln385_3_reg_1315;

assign zext_ln385_6_fu_1067_p1 = or_ln_reg_1300;

assign zext_ln385_7_fu_1086_p1 = lshr_ln385_1_fu_1076_p4;

assign zext_ln385_8_fu_929_p1 = sub_ln385_5_fu_923_p2;

assign zext_ln385_fu_805_p1 = temp_fu_779_p2;

always @ (posedge ap_clk) begin
    select_ln385_reg_1290[0] <= 1'b0;
    or_ln_reg_1300[1] <= 1'b0;
end

endmodule //CAMC_Axis_Initialisation
