// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CAMC_CAMC_Pipeline_VITIS_LOOP_446_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_X_TVALID,
        input_Y_TVALID,
        outStream_1_TREADY,
        outStream_2_TREADY,
        Sample_no,
        input_X_TDATA,
        input_X_TREADY,
        input_X_TKEEP,
        input_X_TSTRB,
        input_X_TUSER,
        input_X_TLAST,
        input_X_TID,
        input_X_TDEST,
        input_Y_TDATA,
        input_Y_TREADY,
        input_Y_TKEEP,
        input_Y_TSTRB,
        input_Y_TUSER,
        input_Y_TLAST,
        input_Y_TID,
        input_Y_TDEST,
        outStream_1_TDATA,
        outStream_1_TVALID,
        outStream_1_TKEEP,
        outStream_1_TSTRB,
        outStream_1_TUSER,
        outStream_1_TLAST,
        outStream_1_TID,
        outStream_1_TDEST,
        outStream_2_TDATA,
        outStream_2_TVALID,
        outStream_2_TKEEP,
        outStream_2_TSTRB,
        outStream_2_TUSER,
        outStream_2_TLAST,
        outStream_2_TID,
        outStream_2_TDEST,
        weights_test_address0,
        weights_test_ce0,
        weights_test_we0,
        weights_test_d0,
        weights_test_q0,
        clear_array_x_address0,
        clear_array_x_ce0,
        clear_array_x_we0,
        clear_array_x_d0,
        clear_array_y_address0,
        clear_array_y_ce0,
        clear_array_y_we0,
        clear_array_y_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   input_X_TVALID;
input   input_Y_TVALID;
input   outStream_1_TREADY;
input   outStream_2_TREADY;
input  [13:0] Sample_no;
input  [31:0] input_X_TDATA;
output   input_X_TREADY;
input  [3:0] input_X_TKEEP;
input  [3:0] input_X_TSTRB;
input  [1:0] input_X_TUSER;
input  [0:0] input_X_TLAST;
input  [4:0] input_X_TID;
input  [5:0] input_X_TDEST;
input  [31:0] input_Y_TDATA;
output   input_Y_TREADY;
input  [3:0] input_Y_TKEEP;
input  [3:0] input_Y_TSTRB;
input  [1:0] input_Y_TUSER;
input  [0:0] input_Y_TLAST;
input  [4:0] input_Y_TID;
input  [5:0] input_Y_TDEST;
output  [31:0] outStream_1_TDATA;
output   outStream_1_TVALID;
output  [3:0] outStream_1_TKEEP;
output  [3:0] outStream_1_TSTRB;
output  [1:0] outStream_1_TUSER;
output  [0:0] outStream_1_TLAST;
output  [4:0] outStream_1_TID;
output  [5:0] outStream_1_TDEST;
output  [31:0] outStream_2_TDATA;
output   outStream_2_TVALID;
output  [3:0] outStream_2_TKEEP;
output  [3:0] outStream_2_TSTRB;
output  [1:0] outStream_2_TUSER;
output  [0:0] outStream_2_TLAST;
output  [4:0] outStream_2_TID;
output  [5:0] outStream_2_TDEST;
output  [13:0] weights_test_address0;
output   weights_test_ce0;
output   weights_test_we0;
output  [13:0] weights_test_d0;
input  [13:0] weights_test_q0;
output  [13:0] clear_array_x_address0;
output   clear_array_x_ce0;
output   clear_array_x_we0;
output  [6:0] clear_array_x_d0;
output  [13:0] clear_array_y_address0;
output   clear_array_y_ce0;
output   clear_array_y_we0;
output  [6:0] clear_array_y_d0;

reg ap_idle;
reg input_X_TREADY;
reg input_Y_TREADY;
reg outStream_1_TVALID;
reg outStream_2_TVALID;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln446_reg_446;
reg    ap_block_state2_pp0_stage1_iter0;
reg   [0:0] tmp_reg_506;
reg   [0:0] tmp_1_reg_510;
reg    ap_predicate_op62_write_state4;
reg    ap_predicate_op63_write_state4;
reg    ap_block_state4_pp0_stage1_iter1;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    input_X_TDATA_blk_n;
wire    ap_block_pp0_stage1;
reg    input_Y_TDATA_blk_n;
reg    outStream_1_TDATA_blk_n;
reg    outStream_2_TDATA_blk_n;
reg   [13:0] i_reg_441;
wire    ap_block_pp0_stage0_11001;
reg   [13:0] i_reg_441_pp0_iter1_reg;
reg   [13:0] i_reg_441_pp0_iter2_reg;
reg   [13:0] i_reg_441_pp0_iter3_reg;
reg   [13:0] i_reg_441_pp0_iter4_reg;
reg   [13:0] i_reg_441_pp0_iter5_reg;
reg   [13:0] i_reg_441_pp0_iter6_reg;
reg   [13:0] i_reg_441_pp0_iter7_reg;
wire   [0:0] icmp_ln446_fu_295_p2;
reg   [31:0] input_X_T_data_reg_450;
reg    ap_block_pp0_stage1_11001;
reg   [3:0] input_X_T_keep_reg_455;
reg   [3:0] input_X_T_strb_reg_461;
reg   [1:0] input_X_T_user_reg_467;
reg   [0:0] input_X_T_last_reg_473;
reg   [4:0] input_X_T_id_reg_479;
reg   [5:0] input_X_T_dest_reg_485;
reg   [31:0] input_Y_T_data_reg_491;
wire   [19:0] Axis_I_input_X_fu_344_p1;
wire   [19:0] Axis_I_input_Y_fu_349_p1;
reg   [19:0] Axis_I_input_Y_reg_501;
wire   [0:0] grp_nbreadreq_fu_172_p9;
wire   [6:0] grp_Axis_Initialisation_fu_281_ap_return;
reg   [6:0] x_point_reg_514;
reg   [6:0] y_point_reg_522;
wire   [0:0] and_ln305_fu_369_p2;
reg   [0:0] and_ln305_reg_527;
reg   [0:0] and_ln305_reg_527_pp0_iter8_reg;
wire   [0:0] and_ln305_1_fu_386_p2;
reg   [0:0] and_ln305_1_reg_531;
reg   [0:0] and_ln305_1_reg_531_pp0_iter8_reg;
reg   [13:0] weights_test_addr_reg_545;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [19:0] grp_Axis_Initialisation_fu_281_input_r;
reg    grp_Axis_Initialisation_fu_281_ap_ce;
reg    ap_block_state2_pp0_stage1_iter0_ignore_call16;
reg    ap_block_state4_pp0_stage1_iter1_ignore_call16;
reg    ap_block_pp0_stage1_11001_ignoreCallOp53;
wire    ap_block_pp0_stage0_11001_ignoreCallOp54;
wire    ap_block_pp0_stage1_ignoreCallOp53;
wire    ap_block_pp0_stage0_ignoreCallOp55;
wire   [63:0] zext_ln446_fu_353_p1;
wire   [63:0] zext_ln307_2_fu_413_p1;
wire    ap_block_pp0_stage0;
reg   [13:0] clear_array_no_fu_126;
wire   [13:0] add_ln446_fu_301_p2;
wire    ap_loop_init;
reg   [13:0] ap_sig_allocacmp_i;
reg    ap_block_pp0_stage1_01001;
reg    clear_array_x_we0_local;
reg    clear_array_x_ce0_local;
reg    clear_array_y_we0_local;
reg    clear_array_y_ce0_local;
reg    weights_test_ce0_local;
reg   [13:0] weights_test_address0_local;
reg    weights_test_we0_local;
wire   [13:0] add_ln307_3_fu_418_p2;
wire   [0:0] icmp_ln305_fu_358_p2;
wire   [0:0] icmp_ln305_1_fu_363_p2;
wire   [0:0] icmp_ln305_2_fu_375_p2;
wire   [0:0] icmp_ln305_3_fu_380_p2;
wire   [7:0] zext_ln307_fu_392_p1;
wire  signed [7:0] add_ln307_fu_395_p2;
wire  signed [13:0] add_ln307_2_fu_408_p0;
wire   [13:0] grp_fu_425_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln307_2_fu_408_p2;
wire   [6:0] grp_fu_425_p1;
wire   [6:0] grp_fu_425_p2;
reg    grp_fu_425_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to9;
reg    ap_done_pending_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [13:0] grp_fu_425_p20;
reg    ap_condition_303;
reg    ap_condition_308;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 clear_array_no_fu_126 = 14'd0;
#0 ap_done_reg = 1'b0;
end

CAMC_Axis_Initialisation grp_Axis_Initialisation_fu_281(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .input_r(grp_Axis_Initialisation_fu_281_input_r),
    .ap_return(grp_Axis_Initialisation_fu_281_ap_return),
    .ap_ce(grp_Axis_Initialisation_fu_281_ap_ce)
);

CAMC_mac_muladd_8s_7ns_7ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
mac_muladd_8s_7ns_7ns_14_4_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln307_fu_395_p2),
    .din1(grp_fu_425_p1),
    .din2(grp_fu_425_p2),
    .ce(grp_fu_425_ce),
    .dout(grp_fu_425_p3)
);

CAMC_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln446_fu_295_p2 == 1'd0))) begin
            clear_array_no_fu_126 <= add_ln446_fu_301_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            clear_array_no_fu_126 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Axis_I_input_Y_reg_501 <= Axis_I_input_Y_fu_349_p1;
        and_ln305_1_reg_531 <= and_ln305_1_fu_386_p2;
        and_ln305_1_reg_531_pp0_iter8_reg <= and_ln305_1_reg_531;
        and_ln305_reg_527 <= and_ln305_fu_369_p2;
        and_ln305_reg_527_pp0_iter8_reg <= and_ln305_reg_527;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        input_X_T_data_reg_450 <= input_X_TDATA;
        input_X_T_dest_reg_485 <= input_X_TDEST;
        input_X_T_id_reg_479 <= input_X_TID;
        input_X_T_keep_reg_455 <= input_X_TKEEP;
        input_X_T_last_reg_473 <= input_X_TLAST;
        input_X_T_strb_reg_461 <= input_X_TSTRB;
        input_X_T_user_reg_467 <= input_X_TUSER;
        input_Y_T_data_reg_491 <= input_Y_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_441 <= ap_sig_allocacmp_i;
        i_reg_441_pp0_iter1_reg <= i_reg_441;
        i_reg_441_pp0_iter2_reg <= i_reg_441_pp0_iter1_reg;
        i_reg_441_pp0_iter3_reg <= i_reg_441_pp0_iter2_reg;
        i_reg_441_pp0_iter4_reg <= i_reg_441_pp0_iter3_reg;
        i_reg_441_pp0_iter5_reg <= i_reg_441_pp0_iter4_reg;
        i_reg_441_pp0_iter6_reg <= i_reg_441_pp0_iter5_reg;
        i_reg_441_pp0_iter7_reg <= i_reg_441_pp0_iter6_reg;
        icmp_ln446_reg_446 <= icmp_ln446_fu_295_p2;
        weights_test_addr_reg_545 <= zext_ln307_2_fu_413_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_reg_510 <= grp_nbreadreq_fu_172_p9;
        tmp_reg_506 <= grp_nbreadreq_fu_172_p9;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_point_reg_514 <= grp_Axis_Initialisation_fu_281_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        y_point_reg_522 <= grp_Axis_Initialisation_fu_281_ap_return;
    end
end

always @ (*) begin
    if (((icmp_ln446_reg_446 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready_pp0_iter8_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (ap_loop_exit_ready == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to9 = 1'b1;
    end else begin
        ap_idle_pp0_1to9 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i = 14'd0;
    end else begin
        ap_sig_allocacmp_i = clear_array_no_fu_126;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        clear_array_x_ce0_local = 1'b1;
    end else begin
        clear_array_x_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln305_1_fu_386_p2) & (1'd1 == and_ln305_fu_369_p2) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        clear_array_x_we0_local = 1'b1;
    end else begin
        clear_array_x_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        clear_array_y_ce0_local = 1'b1;
    end else begin
        clear_array_y_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln305_1_fu_386_p2) & (1'd1 == and_ln305_fu_369_p2) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        clear_array_y_we0_local = 1'b1;
    end else begin
        clear_array_y_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp53)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp54)))) begin
        grp_Axis_Initialisation_fu_281_ap_ce = 1'b1;
    end else begin
        grp_Axis_Initialisation_fu_281_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln446_reg_446 == 1'd0)) begin
        if ((1'b1 == ap_condition_308)) begin
            grp_Axis_Initialisation_fu_281_input_r = Axis_I_input_Y_reg_501;
        end else if ((1'b1 == ap_condition_303)) begin
            grp_Axis_Initialisation_fu_281_input_r = Axis_I_input_X_fu_344_p1;
        end else begin
            grp_Axis_Initialisation_fu_281_input_r = 'bx;
        end
    end else begin
        grp_Axis_Initialisation_fu_281_input_r = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_425_ce = 1'b1;
    end else begin
        grp_fu_425_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln446_reg_446 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        input_X_TDATA_blk_n = input_X_TVALID;
    end else begin
        input_X_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln446_reg_446 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        input_X_TREADY = 1'b1;
    end else begin
        input_X_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln446_reg_446 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        input_Y_TDATA_blk_n = input_Y_TVALID;
    end else begin
        input_Y_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln446_reg_446 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        input_Y_TREADY = 1'b1;
    end else begin
        input_Y_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op62_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        outStream_1_TDATA_blk_n = outStream_1_TREADY;
    end else begin
        outStream_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op62_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        outStream_1_TVALID = 1'b1;
    end else begin
        outStream_1_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op63_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        outStream_2_TDATA_blk_n = outStream_2_TREADY;
    end else begin
        outStream_2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op63_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        outStream_2_TVALID = 1'b1;
    end else begin
        outStream_2_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter9 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            weights_test_address0_local = weights_test_addr_reg_545;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            weights_test_address0_local = zext_ln307_2_fu_413_p1;
        end else begin
            weights_test_address0_local = 'bx;
        end
    end else begin
        weights_test_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        weights_test_ce0_local = 1'b1;
    end else begin
        weights_test_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln305_1_reg_531_pp0_iter8_reg) & (1'd1 == and_ln305_reg_527_pp0_iter8_reg) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        weights_test_we0_local = 1'b1;
    end else begin
        weights_test_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to9 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Axis_I_input_X_fu_344_p1 = input_X_TDATA[19:0];

assign Axis_I_input_Y_fu_349_p1 = input_Y_TDATA[19:0];

assign add_ln307_2_fu_408_p0 = grp_fu_425_p3;

assign add_ln307_2_fu_408_p2 = ($signed(add_ln307_2_fu_408_p0) + $signed(14'd16383));

assign add_ln307_3_fu_418_p2 = (weights_test_q0 + 14'd1);

assign add_ln307_fu_395_p2 = ($signed(zext_ln307_fu_392_p1) + $signed(8'd255));

assign add_ln446_fu_301_p2 = (ap_sig_allocacmp_i + 14'd1);

assign and_ln305_1_fu_386_p2 = (icmp_ln305_3_fu_380_p2 & icmp_ln305_2_fu_375_p2);

assign and_ln305_fu_369_p2 = (icmp_ln305_fu_358_p2 & icmp_ln305_1_fu_363_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001_ignoreCallOp54 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp55 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage1_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage1_iter1))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_ignoreCallOp53 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage1_iter1_ignore_call16))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0_ignore_call16)));
end

assign ap_block_pp0_stage1_ignoreCallOp53 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage1_iter1))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (((input_Y_TVALID == 1'b0) & (icmp_ln446_reg_446 == 1'd0)) | ((icmp_ln446_reg_446 == 1'd0) & (input_X_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0_ignore_call16 = (((input_Y_TVALID == 1'b0) & (icmp_ln446_reg_446 == 1'd0)) | ((icmp_ln446_reg_446 == 1'd0) & (input_X_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state4_io = (((ap_predicate_op63_write_state4 == 1'b1) & (outStream_2_TREADY == 1'b0)) | ((ap_predicate_op62_write_state4 == 1'b1) & (outStream_1_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage1_iter1 = (((ap_predicate_op63_write_state4 == 1'b1) & (outStream_2_TREADY == 1'b0)) | ((ap_predicate_op62_write_state4 == 1'b1) & (outStream_1_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage1_iter1_ignore_call16 = (((ap_predicate_op63_write_state4 == 1'b1) & (outStream_2_TREADY == 1'b0)) | ((ap_predicate_op62_write_state4 == 1'b1) & (outStream_1_TREADY == 1'b0)));
end

always @ (*) begin
    ap_condition_303 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_ignoreCallOp53));
end

always @ (*) begin
    ap_condition_308 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_ignoreCallOp55));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

always @ (*) begin
    ap_predicate_op62_write_state4 = ((tmp_1_reg_510 == 1'd1) & (tmp_reg_506 == 1'd1));
end

always @ (*) begin
    ap_predicate_op63_write_state4 = ((tmp_1_reg_510 == 1'd1) & (tmp_reg_506 == 1'd1));
end

assign ap_ready = ap_ready_sig;

assign clear_array_x_address0 = zext_ln446_fu_353_p1;

assign clear_array_x_ce0 = clear_array_x_ce0_local;

assign clear_array_x_d0 = x_point_reg_514;

assign clear_array_x_we0 = clear_array_x_we0_local;

assign clear_array_y_address0 = zext_ln446_fu_353_p1;

assign clear_array_y_ce0 = clear_array_y_ce0_local;

assign clear_array_y_d0 = grp_Axis_Initialisation_fu_281_ap_return;

assign clear_array_y_we0 = clear_array_y_we0_local;

assign grp_fu_425_p1 = 14'd100;

assign grp_fu_425_p2 = grp_fu_425_p20;

assign grp_fu_425_p20 = y_point_reg_522;

assign grp_nbreadreq_fu_172_p9 = input_X_TVALID;

assign icmp_ln305_1_fu_363_p2 = ((grp_Axis_Initialisation_fu_281_ap_return != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln305_2_fu_375_p2 = ((x_point_reg_514 < 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln305_3_fu_380_p2 = ((grp_Axis_Initialisation_fu_281_ap_return < 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln305_fu_358_p2 = ((x_point_reg_514 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln446_fu_295_p2 = ((ap_sig_allocacmp_i == Sample_no) ? 1'b1 : 1'b0);

assign outStream_1_TDATA = input_X_T_data_reg_450;

assign outStream_1_TDEST = input_X_T_dest_reg_485;

assign outStream_1_TID = input_X_T_id_reg_479;

assign outStream_1_TKEEP = input_X_T_keep_reg_455;

assign outStream_1_TLAST = input_X_T_last_reg_473;

assign outStream_1_TSTRB = input_X_T_strb_reg_461;

assign outStream_1_TUSER = input_X_T_user_reg_467;

assign outStream_2_TDATA = input_Y_T_data_reg_491;

assign outStream_2_TDEST = input_X_T_dest_reg_485;

assign outStream_2_TID = input_X_T_id_reg_479;

assign outStream_2_TKEEP = input_X_T_keep_reg_455;

assign outStream_2_TLAST = input_X_T_last_reg_473;

assign outStream_2_TSTRB = input_X_T_strb_reg_461;

assign outStream_2_TUSER = input_X_T_user_reg_467;

assign weights_test_address0 = weights_test_address0_local;

assign weights_test_ce0 = weights_test_ce0_local;

assign weights_test_d0 = add_ln307_3_fu_418_p2;

assign weights_test_we0 = weights_test_we0_local;

assign zext_ln307_2_fu_413_p1 = add_ln307_2_fu_408_p2;

assign zext_ln307_fu_392_p1 = x_point_reg_514;

assign zext_ln446_fu_353_p1 = i_reg_441_pp0_iter7_reg;

endmodule //CAMC_CAMC_Pipeline_VITIS_LOOP_446_1
